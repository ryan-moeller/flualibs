.\"
.\" SPDX-License-Identifier: BSD-2-Clause
.\"
.\" Copyright (c) 2024-2025 Ryan Moeller <ryan-moeller@att.net>
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd March 1, 2024
.Dt KQUEUE 3lua
.Os
.Sh NAME
.Nm kqueue ,
.Nm :kevent ,
.Nm :close ,
.Nm EV_ADD ,
.Nm EV_ENABLE ,
.Nm EV_DISABLE ,
.Nm EV_DISPATCH ,
.Nm EV_DELETE ,
.Nm EV_RECEIPT ,
.Nm EV_ONESHOT ,
.Nm EV_CLEAR ,
.Nm EV_EOF ,
.Nm EV_ERROR ,
.Nm EV_KEEPUDATA ,
.Nm EVFILT_READ ,
.Nm EVFILT_WRITE ,
.Nm EVFILT_EMPTY ,
.Nm EVFILT_AIO ,
.Nm EVFILT_VNODE ,
.Nm EVFILT_PROC ,
.Nm EVFILT_PROCDESC ,
.Nm EVFILT_SIGNAL ,
.Nm EVFILT_TIMER ,
.Nm EVFILT_USER ,
.Nm NOTE_FFNOP ,
.Nm NOTE_FFAND ,
.Nm NOTE_FFOR ,
.Nm NOTE_FFCOPY ,
.Nm NOTE_FFCTRLMASK ,
.Nm NOTE_FFLAGSMASK ,
.Nm NOTE_TRIGGER ,
.Nm NOTE_LOWAT ,
.Nm NOTE_FILE_POLL ,
.Nm NOTE_DELETE ,
.Nm NOTE_WRITE ,
.Nm NOTE_EXTEND ,
.Nm NOTE_ATTRIB ,
.Nm NOTE_LINK ,
.Nm NOTE_RENAME ,
.Nm NOTE_REVOKE ,
.Nm NOTE_OPEN ,
.Nm NOTE_CLOSE ,
.Nm NOTE_CLOSE_WRITE ,
.Nm NOTE_READ ,
.Nm NOTE_EXIT ,
.Nm NOTE_FORK ,
.Nm NOTE_EXEC ,
.Nm NOTE_PCTRLMASK ,
.Nm NOTE_PDATAMASK ,
.Nm NOTE_TRACK ,
.Nm NOTE_TRACKERR ,
.Nm NOTE_CHILD ,
.Nm NOTE_SECONDS ,
.Nm NOTE_MSECONDS ,
.Nm NOTE_USECONDS ,
.Nm NOTE_NSECONDS ,
.Nm NOTE_ABSTIME
.Nd Lua bindings for
.Xr kqueue 2 ,
.Xr kevent 2
.Sh SYNOPSIS
.Bd -literal
local kqueue = require('kqueue')
.Ed
.Pp
.Bl -tag -width XXXX -compact
.It Dv kq = kqueue.kqueue( )
.It Dv event = kq:kevent([changelist ] )
.It Dv kq:close( )
.El
.Sh DESCRIPTION
The
.Nm kqueue
module provides bindings for the
.Xr kqueue 2
and
.Xr kevent 2
system calls.
.Bl -tag -width XXXX
.It Dv kq = kqueue.kqueue( )
Create a new kernel event queue and return a descriptor.
This is implemented as kqueuex(KQUEUE_CLOEXEC) so the returned
file descriptor is automatically closed on execve(2).
.It Dv event = kq:kevent([changelist ] )
Apply an optional
.Fa changelist
to the queue and wait for an event to return.
.It Dv kq:close( )
Close the kernel event queue descriptor.
.El
.Sh EXAMPLES
Wait for stdin to be readable using kqueue:
.Bd -literal -offset indent
require('fileno')
local kqueue = require('kqueue')
local ucl = require('ucl')

local kq = kqueue.kqueue()

local changelist = {
	{
		ident = io.stdin:fileno(),
		filter = kqueue.EVFILT_READ,
		flags = kqueue.EV_ADD,
		fflags = 0,
		data = 0,
		udata = coroutine.create(function (event) repeat
			print("stdin is readable: ", ucl.to_json(event))
			local len = event.data
			local data = io.stdin:read(len)
			io.stdout:write(data)
			event = coroutine.yield()
		until false end)
	}
}

local event = kq:kevent(changelist)
repeat
	coroutine.resume(event.udata, event)
	event = kq:kevent()
until false

kq:close()
.Ed
.Sh SEE ALSO
.Xr kqueue 2 ,
.Xr fileno 3lua Pq Pa https://github.com/ryan-moeller/flualibs
.Sh AUTHORS
.An Ryan Moeller
