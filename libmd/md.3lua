.\"
.\" SPDX-License-Identifier: BSD-2-Clause
.\"
.\" Copyright (c) 2024-2025 Ryan Moeller
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd September 6, 2025
.Dt MD 3lua
.Os
.Sh NAME
.Nm sha1_init ,
.Nm :update ,
.Nm :final ,
.Nm :digest
.Nd Lua bindings for
.Xr SHA1_Init 3 ,
.Xr SHA1_Update 3 ,
.Xr SHA1_Final 3 ,
.Xr SHA1_End 3
.Sh SYNOPSIS
.Bd -literal
md = require('md')
.Ed
.Pp
.Bl -tag -width XXXX -compact
.It Dv sha1 = md.sha1_init( )
.It Dv sha1:update(data )
.It Dv hash = sha1:final( )
.It Dv hex = sha1:digest( )
.El
.Sh DESCRIPTION
The
.Nm md
module provides bindings for Message Digest Support Library
.Pq libmd
function calls.
.Bl -tag -width XXXX
.It Dv sha1 = md.sha1_init( )
Initialize a SHA1 message digest context.
.It Dv sha1:update(data )
Update the digest with a string of data.
This may be called several times on the same context.
.It Dv hash = sha1:final( )
Finalize the SHA1 context, returning the raw hash data as a byte string.
.It Dv hex = sha1:digest( )
Finalize the SHA1 context, returning a hexadecimal ASCII string of the digest.
.El
.Sh EXAMPLES
Compute the SHA1 hash of a string:
.Bd -literal -offset indent
md = require('md')

sha1 = md.sha1_init()
sha1:update("Hello, FreeBSD!")
hash = sha1:final()
.Ed
.Sh SEE ALSO
.Xr b64 3lua Pq Pa https://github.com/ryan-moeller/flualibs ,
.Xr xor 3lua Pq Pa https://github.com/ryan-moeller/flualibs
.Sh AUTHORS
.An Ryan Moeller
