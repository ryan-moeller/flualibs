.\"
.\" SPDX-License-Identifier: BSD-2-Clause
.\"
.\" Copyright (c) 2025 Ryan Moeller
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd October 7, 2025
.Dt FETCH 3lua
.Os
.Sh NAME
.Nm get ,
.Nm put ,
.Nm xget ,
.Nm stat ,
.Nm list ,
.Nm request ,
.Nm ABORT ,
.Nm AUTH ,
.Nm DOWN ,
.Nm EXISTS ,
.Nm FULL ,
.Nm INFO ,
.Nm MEMORY ,
.Nm MOVED ,
.Nm NETWORK ,
.Nm OK ,
.Nm PROTO ,
.Nm RESOLV ,
.Nm SERVER ,
.Nm TEMP ,
.Nm TIMEOUT ,
.Nm UNAVAIL ,
.Nm UNKNOWN ,
.Nm URL
.Nd Lua bindings for
.Xr fetch 3
.Sh SYNOPSIS
.Bd -literal
fetch = require('fetch')
.Ed
.Pp
.Bl -tag -width XXXX -compact
.It Dv f, errmsg, errcode = fetch.get(URL[ , flags ] )
.It Dv f, errmsg, errcode = fetch.put(URL[ , flags ] )
.It Dv f, stat_or_errmsg, errcode = fetch.xget(URL[ , flags ] )
.It Dv stat, errmsg, errcode = fetch.stat(URL[ , flags ] )
.It Dv ents, errmsg, errcode = fetch.list(URL[ , flags ] )
.It Dv f, errmsg, errcode = fetch.request(URL, method[ , flags[ , content_type[ , body ] ] ] )
.It Dv f, stat_or_errmsg, res_headers_or_errcode, res_trailers = fetch.xrequest(URL, method[ , flags[ , req_headers[ , req_trailers[ , res_headers[ , res_trailers[ , body ] ] ] ] ] )
.It Dv res_trailers = fetch.trailers(f )
.El
.Sh DESCRIPTION
The
.Nm fetch
module provides bindings for File Transfer Library
.Pq libfetch
function calls.
.Bl -tag -width XXXX
.It Dv f, errmsg, errcode = fetch.get(URL[ , flags ] )
Wraps fetchGetURL.
.It Dv f, errmsg, errcode = fetch.put(URL[ , flags ] )
Wraps fetchPutURL.
.It Dv f, stat_or_errmsg, errcode = fetch.xget(URL[ , flags ] )
Wraps fetchXGetURL.
.It Dv stat, errmsg, errcode = fetch.stat(URL[ , flags ] )
Wraps fetchStatURL.
.It Dv ents, errmsg, errcode = fetch.list(URL[ , flags ] )
Wraps fetchListURL.
.It Dv f, errmsg, errcode = fetch.request(URL, method[ , flags[ , content_type[ , body ] ] ] )
Wraps fetchReqHTTP.
.It Dv f, stat_or_errmsg, res_headers_or_errcode, res_trailers = fetch.xrequest(URL, method[ , flags[ , req_headers[ , req_trailers[ , res_headers[ , res_trailers[ , body ] ] ] ] ] )
Wraps fetchXReqHTTP.
.Pp
.Fa req_headers ,
.Fa req_trailers ,
.Fa res_headers ,
and
.Fa res_trailers
are tables constructed as a list of headers:
.Bd -literal -offset indent
{
	{
		name = "",
		value = ""|#,
	},
	...
}
.Ed
.Pp
.Fa req_trailers
may be appended to during the call to
.Fn fetch.xrequest
as a result of the
.Fa body
being read.
.Pp
.Fa res_headers
and
.Fa res_trailers
are passed through as return values,
and are modified in-place.
.Pp
.Fa res_trailers
is not filled until the response body in
.Dv f
has been read completely and either closed or passed to
.Fn fetch.trailers .
.Pp
.Fa body
can be:
.Bl -bullet -compact
.It
.Dv nil
.It
a string
.It
a Lua file object
.It
a table with a
.Dv read
method taking the number of bytes to read as a parameter and returning a string,
and optionally a
.Dv seek
method taking a whence string and integer offset as parameters and returning the
new position as an integer.
.El
.Pp
A request
.Fa body
with a successful seek operation may be sent unchunked,
while an unseekable
.Fa body
will be chunked.
.It Dv res_trailers = fetch.trailers(f )
Returns the argument passed as
.Fa req_trailers
for the call to
.Fn fetch.xrequest
that produced
.Fa f ,
filling the table with any trailers following the response body if present and
not already done.
.Pp
This call always returns
.Dv nil
if
.Fa f
has been closed.
.El
.Sh EXAMPLES
Get the contents of a URL:
.Bd -literal -offset indent
fetch = require('fetch')

f = fetch.get('https://download.freebsd.org/ftp/TIMESTAMP')
timestamp = f:read('*a')
f:close()
print(timestamp)
.Ed
.Sh SEE ALSO
.Xr fetch 3
.Sh AUTHORS
.An Ryan Moeller
